name: Release

on:
  push:
    tags:
      - '[0-9]+.[0-9]+.[0-9]+'

jobs:

  verify-version:
    name: Verify version
    runs-on: ubuntu-latest
    timeout-minutes: 1

    steps:
      - uses: actions/checkout@v2

      - name: Confirm Cargo version matches git tag
        run: |
          cargo_version="$(grep '^version = ".*"$' Cargo.toml | cut -d '"' -f2)"
          git_tag_version="${GITHUB_REF/refs\/tags\//}"

          echo "cargo_version = $cargo_version"
          echo "git_tag_version = $git_tag_version"
          if [ "$cargo_version" != "$git_tag_version" ] && [ "$cargo_version" != "" ] ; then
            echo "Tags are not identical. Exiting due to error."
            exit 1
          fi

  # Build, lint, and test
  ci:
    name: CI
    runs-on: ubuntu-latest
    timeout-minutes: 5
    needs: [verify-version]

    strategy:
      matrix:
        rust-version: ['1.45.0', 'stable']

    steps:
      - uses: actions/checkout@v2

      - name: Install rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ matrix.rust-version }}
          override: true

      - name: cargo check
        uses: actions-rs/cargo@v1
        with: { command: check, args: --all-targets --all-features }

      - run: rustup component add rustfmt
      - name: cargo fmt
        uses: actions-rs/cargo@v1
        with: { command: fmt, args: --all -- --check }

      - name: Install wasm-pack
        run: curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh

      - run: wasm-pack test --node

      - run: ./bin/ci.sh

      - run: rustup component add clippy
      - name: cargo clippy
        uses: actions-rs/cargo@v1
        with: { command: clippy, args: --all-targets --all-features -- -D warnings }

  # job: create_release
  create_release:
    name: Create repo release on Github
    runs-on: ubuntu-latest
    timeout-minutes: 5
    needs: [ci]
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          body: >
            This release contains the repo source code and a tar.gz of the NPM package.
            It has been created for proper archiving practices.
            Please use NPM to install and use the NPM package!
            
            NPM link: https://www.npmjs.com/package/@urbdyn/petgraph-wasm
          draft: false
          prerelease: false

  cd:
    name: CD
    runs-on: ubuntu-latest
    timeout-minutes: 5
    needs: [create_release]

    steps:
      - uses: actions/checkout@v2

      - name: Install rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true

      - uses: actions/setup-node@v3
        with:
          node-version: '14.x'

      - name: Install wasm-pack
        run: curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh

      - run: ./bin/ci.sh

      - name: npm pack
        id: npm_pack
        run: |
          cd ./pkg/
          export NPM_TGZ_FILE=$(npm pack)
          echo "::set-output name=npm_tgz_file::$NPM_TGZ_FILE"
          mv "$NPM_TGZ_FILE" ../

      - run: npm publish
        working-directory: ./pkg/
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Upload Release Asset - NPM tgz
        id: upload-release-asset-npm-tgz
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_path: ./${{ steps.npm_pack.outputs.npm_tgz_file }}
          asset_name: ${{ steps.npm_pack.outputs.npm_tgz_file }}
          asset_content_type: application/gzip
